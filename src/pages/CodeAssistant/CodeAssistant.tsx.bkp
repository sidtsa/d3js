// import {useState, useRef} from 'react';
// import Editor from 'react-simple-code-editor';
// //Example style, you can use another
// // import { highlight, languages } from 'prismjs';
// // import 'prismjs/components/prism-clike';
// // import 'prismjs/components/prism-python';
// // import 'prismjs/themes/prism.css';
// import CodeEditor from '../../components/CodeEditor/CodeEditor';
// import { Approaches } from '../../api';
// import CodeToggleButton from '../../components/CodeToggle/CodeToggle';
// import styles from './CodeAssistant.module.css'
// import { Button, Typography } from '@mui/material';
// import CodePicker from '../../components/CodePicker/CodePicker';

// export default function CodeAssistant() {
//   const [code, setCode] = useState('');
//   const [codeOutput, setCodeOutput] = useState('');
//   const [codeApproachState , setCodeApproachState] = useState<Approaches>(Approaches.CodeGen) 
//   const codeApproach = useRef<Approaches>(Approaches.CodeGen)
  
//   const handleCodeApproachChange = (_ev?: React.MouseEvent<HTMLElement>, newAlignment?: Approaches) => {
//     setCodeApproachState(newAlignment || Approaches.CodeGen);
//     codeApproach.current = newAlignment || Approaches.CodeGen;
//     console.log(newAlignment);
//     // clearChat();
// };
//   return (
//     <div className={styles.container}>
//       <div className={styles.catalogToggle}>
//       <CodeToggleButton value={codeApproach.current} handleChange={handleCodeApproachChange} />
//       </div>
//       <div className={styles.containerCodeBox}>
//       <div className={styles.codeBox}>
//       <CodePicker inputLable='Input Code'/>
//         <div className={styles.codeBox}>
//         <CodeEditor value={code} onChange={setCode} />
//         </div>  
//       </div>
//       <div className={styles.convertButton}>
//         <Button variant='outlined'>Convert</Button>
//       </div>
//       <div className={styles.codeBox}>
//         <CodePicker inputLable='Output Code'/>
//         <div className={styles.codeBox}>
//         <CodeEditor value={codeOutput} onChange={setCodeOutput} />
//         </div>
//       </div>
//       </div>
//     </div>
//   );
// }
